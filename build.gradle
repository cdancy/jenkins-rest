plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    mavenCentral()
}

dependencies {
    ext.jcloudsVersion = '2.5.0'
    ext.autoValueVersion = '1.10.1'
    ext.autoServiceVersion = '1.0.1'
    ext.guiceVersion = '5.1.0'

    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}")
    implementation ("com.google.inject:guice:${guiceVersion}")
    implementation ("com.google.inject.extensions:guice-assistedinject:${guiceVersion}")
    implementation ("com.google.auto.service:auto-service-annotations:${autoServiceVersion}")
    annotationProcessor ("com.google.auto.service:auto-service:${autoServiceVersion}")
    implementation ("com.google.auto.value:auto-value-annotations:${autoValueVersion}")
    annotationProcessor ("com.google.auto.value:auto-value:${autoValueVersion}")

    testImplementation ("org.apache.jclouds:jclouds-core:${jcloudsVersion}:tests")
    testImplementation ("org.apache.jclouds.driver:jclouds-slf4j:${jcloudsVersion}")
    testImplementation ('org.assertj:assertj-core:3.24.2')
    testImplementation ('org.testng:testng:7.7.1')
    testImplementation ('com.squareup.okhttp3:mockwebserver:4.10.0')
    testImplementation ('ch.qos.logback:logback-core:1.4.6')
    testImplementation ('ch.qos.logback:logback-classic:1.4.6')
}

ext.compatibilityVersion = JavaVersion.VERSION_11
ext.javadocPath = compatibilityVersion.isJava8() ? '' : 'en/java/'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Jenkins REST client',
                   'Implementation-Version': archiveVersion,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    group = "Verification"
    description = "Mock tests"
    useTestNG()
    include '**/**MockTest*'
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: mockTest) {
    group = "Verification"
    description = "Integration tests - Jenkins must be running. See the README."
    doFirst {
        def integProjectDir = project.file("${buildDir}/integ-projects")
        if (!integProjectDir.exists()) {
            if (!integProjectDir.mkdirs()) {
                throw new RuntimeException("Failed to create integ-project directory @ ${integProjectDir.path}")
            }
        }
    }
    useTestNG()
    include "**/**LiveTest*"
    maxParallelForks = 1
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }

    def possibleUsernameApiToken = project.findProperty("testJenkinsUsernameApiToken")
    def usernameApiToken = [:]
    if (possibleUsernameApiToken) {
        usernameApiToken["test.jenkins.usernameApiToken"] = possibleUsernameApiToken
    }

    systemProperties = [
        "test.jenkins.endpoint" : testJenkinsRestEndpoint,
        "test.jenkins.usernamePassword" : testJenkinsUsernamePassword
    ] << usernameApiToken
}

javadoc {
    source = sourceSets.main.allJava
    options.with {
        links "https://docs.oracle.com/${javadocPath}javase/${compatibilityVersion.toString().replaceAll(/.*\./,"")}/docs/api"
        links "https://google.github.io/guice/api-docs/${dependencies.guiceVersion}/javadoc/"
        addStringOption('Xdoclint:none', '-quiet')
        addStringOption('source', compatibilityVersion.toString().replaceAll(/.*\./,""))
    }
}
