buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.19.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.github.johnrengelman.shadow'

apply from: "$rootDir/gradle/additional-artifacts.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/documentation.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
apply from: "$rootDir/gradle/release.gradle"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    ext.jcloudsVersion = '2.2.1'
    ext.autoValueVersion = '1.7.4'
    ext.autoServiceVersion = '1.0-rc7'
    ext.guiceVersion = '5.0.0'

    compile ("org.apache.jclouds:jclouds-core:${jcloudsVersion}")
    compile ("com.google.inject:guice:${guiceVersion}")
    compile ("com.google.inject.extensions:guice-assistedinject:${guiceVersion}")
    compile ("com.google.auto.service:auto-service-annotations:${autoServiceVersion}")
    annotationProcessor ("com.google.auto.service:auto-service:${autoServiceVersion}")
    compile ("com.google.auto.value:auto-value-annotations:${autoValueVersion}")
    annotationProcessor ("com.google.auto.value:auto-value:${autoValueVersion}")
    
    testCompile ("org.apache.jclouds:jclouds-core:${jcloudsVersion}:tests")
    testCompile ("org.apache.jclouds.driver:jclouds-slf4j:${jcloudsVersion}")
    testCompile ('org.testng:testng:7.3.0')
    testCompile ('org.assertj:assertj-core:3.19.0')
    testCompile ('com.squareup.okhttp:mockwebserver:2.7.5')
    testCompile ('ch.qos.logback:logback-core:1.2.3')
    testCompile ('ch.qos.logback:logback-classic:1.2.3')
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Jenkins REST client',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:-options"]
}

task mockTest(type: Test) {
    useTestNG()
    include '**/**MockTest*'
    maxParallelForks = 2
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
}

task integTest(type: Test, dependsOn: mockTest) {
    doFirst {
        def integProjectDir = project.file("${buildDir}/integ-projects")
        if (!integProjectDir.exists()) {
            if (!integProjectDir.mkdirs()) {
                throw new RuntimeException("Failed to create integ-project directory @ ${integProjectDir.path}")
            }
        }
    }
    useTestNG()
    include "**/**LiveTest*"
    maxParallelForks = 1
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed'
    }
    def authentication = [:]
    def possibleAuth = project.findProperty('testJenkinsRestCredentials')
    if (possibleAuth) {
        authentication['test.jenkins.rest.credentials'] = possibleAuth
    } else {
        possibleAuth = project.findProperty('testJenkinsRestToken')
        if (possibleAuth) {
            authentication['test.jenkins.rest.token'] = possibleAuth
        } else {
            logger.quiet 'No authentication parameters found. Assuming anonymous...'
        }
    }

    // property 'test.bitbucket.endpoint' needs to be
    // hard-coded in for jclouds test framework
    systemProperties = ["test.jenkins.endpoint" : "${testJenkinsRestEndpoint}",
                        "test.jenkins.basedir" : "${buildDir}/integ-projects"] << authentication
}
